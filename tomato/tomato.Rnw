%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load libraries and data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<load,eval=TRUE,echo=FALSE,results=hide>>=
#library(goseq)
library(GenomicRanges)
#library(IRanges)
#library(plotrix)
library(xtable)
#library(RColorBrewer)
#library(lattice)
library(rtracklayer)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Functional association and gene description
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<global,echo=FALSE,results=hide>>=
#inDir <- system.file("extdata", package="smutans", mustWork=TRUE)
#inDir <- "extdata"
@
\documentclass[10pt]{article}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{color} 
\usepackage{setspace} 
\usepackage{rotating}
\usepackage{xr}
\usepackage{url}
\usepackage{longtable}
\usepackage{lscape}
\usepackage[labelfont=bf,labelsep=period,justification=raggedright]{caption}
\usepackage[round,comma,numbers]{natbib}

\usepackage{xcolor}
\usepackage{titlesec}
%\titleformat{\section}[runin]{\bfseries\filcenter}{}{1em}{}
%\titleformat{\subsection}[runin]{\bfseries}{}{1em}{}
%\setcounter{secnumdepth}{0}
%\titlespacing*{\section}{0pt}{0pt}{0pt}
%\titlespacing*{\subsection}{0pt}{0pt}{0pt}

% \usepackage{../../latex/sty/genres}
\def\@cite#1#2{(#1\if@tempswa , #2\fi)}
\def\@biblabel#1{}

% Supplementary material
% \externaldocument{mss-lin-supp}

% Text layout
\oddsidemargin 0in
\evensidemargin 0in
\topmargin -.5in
\textwidth 6.5in
\textheight 9in
\parskip 0.25in

\makeatletter
\SweaveOpts{keep.source=TRUE,eps=FALSE,include=FALSE,width=6,height=6}
\newcommand{\Robject}[1]{object \texttt{\textbf{#1}}}
\newcommand{\Rpackage}[1]{R package \textit{#1}}
\newcommand{\Rclass}[1]{class \textit{#1}}
\newcommand{\Rfunction}[1]{{function \texttt{\textbf{#1}}}}
\newcommand{\program}[1]{{\texttt{#1}}}
\newcommand{\fixme}[1]{\textbf{(COMMENT BY: }\textit{\textcolor{red}{#1}})}
\newcommand{\change}[1]{\textit{\textcolor{blue}{#1}}}
\newcommand{\comment}[1]{}
\makeatother

\pagestyle{myheadings}
% \pagestyle{empty}
\markright{Tomato analysis}

\begin{document}

\begin{titlepage}

\title{Circos Plots and R Analysis using RNA-Seq of {\em Tomato}}

\author{Sang Chul Choi$^{1}$, and Je Min Lee$^{2}$}

\date{ }
\maketitle
\thispagestyle{empty}

\begin{footnotesize}
\begin{center}
$^1$Department of Biological Statistics and Computational Biology,\\
Cornell University, Ithaca, NY 14853, USA
\\[1ex]
$^2$Boyce Thompson Institute for Plant Research,\\
533 Tower Road Ithaca, NY 14853 USA
\\
\end{center}
\end{footnotesize}

\vspace{1in}

\begin{tabular}{lp{4.5in}}
{\bf Keywords:}&circos plot, R 
\vspace{1ex}\\
{\bf Running Head:}&Tomato analysis
\vspace{1ex}\\ 
\end{tabular}

\end{titlepage}

\setcounter{page}{2}

\doublespacing
\raggedright
\parindent 2em
\parskip 0pt

\section*{Abstract}

We visualize SNPs and eQTLs using the circos tool, and compute statistics of the
data using R.
RNA-seq data from Tomato IL lines with M82 background are visualized and
summarized. RNA-seq data of M82 and each of 74 IL lines are compared to produce
SNP sites. IL regions should contain most of SNP sites, which allows to manually
annotate IL regions. An IL line contains a major IL region and multiple minor IL
regions. Three types of SNP sites are mutation (M), insertion (I), and deletion
(D).  Gene expression in M82 and each of IL lines are compared to determine
differentially expressed genes, which we call expression QTLs.  DE genes or
eQTLs bounded by a major IL, and DE genes near SNPs (within 50 kbps on either
side) are called cis eQTLs, and otherwise called trans eQTLs. We report summary
statistics of SNPs such as numbers of unque SNPs on each chromosome using the IL
lines in the chromosome, numbers of SNPs on annotated regions, and numbers of
eQTLs. 

\clearpage{}

\tableofcontents

\clearpage{}

\section{Correlations}

\subsection{Correlation between gene sets A and B}

Let's consider a beginner in R programming.  A programming language has an
assignment feature to create a variable, which can be referred to later. 
<<geneA2geneB,echo=TRUE,results=hide>>=
x <- "/Users/goshng/Documents/Projects/Tomato-Analysis"
@
Now, you can use the variable \Robject{x}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
x
@
Let's change the directory to the Tomato Analysis calling \Rfunction{setwd}
function with \Robject{x}.
<<geneA2geneB,echo=TRUE,results=hide>>=
setwd(x)
@
Now, we create more variables.
<<geneA2geneB,echo=TRUE,results=hide>>=
raw <- "raw"
expGene <- "IL-expressionforcorrelation.csv"
geneSetA <- "for-apriori-subnetwork-a.csv"
geneSetB <- "for-apriori-subnetwork-b.csv"
ab.file <- "ab"
@
First, let's read the total gene expression file referred to by
\Robject{expGene}.
<<geneA2geneB,echo=TRUE,results=hide>>=
x <- read.csv(paste("data",raw,expGene,sep="/"))
@
Note that we used two functions: \Rfunction{read.csv} and \Rfunction{paste} to
read the expression file and store the content in a variable \Robject{x}. The
\Rfunction{paste} concatenates all elements in the function arguments to create
the file path to the expression data. Let's call the \Rfunction{paste} only
without \Rfunction{read.csv} to see what the \Rfunction{paste} returns.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
paste("data",raw,expGene,sep="/")
@
The \Rfunction{read.csv} takes the file path returned by \Rfunction{paste} to
read the content of the expression data.  You can examine a few rows of the
expresion data using \Rfunction{head}. We will not show the result of the
\Rfunction{head} because it prints out too much. You should try to call it using
the following line. 
<<geneA2geneB,echo=TRUE,results=hide>>=
head(x)
@
Let's take a moment to see how we can handle the data referred to by
\Robject{x}. This could be one of the most important parts in R programming;
how can we manipulate the content of a table-form data. Let's see the dimension
of the table, or the two numbers of rows and columns.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
dim(x)
@
The \Robject{x} is a \Sexpr{dim(x)[1]}-by-\Sexpr{dim(x)[2]} table, which has 
\Sexpr{dim(x)[1]} rows, and \Sexpr{dim(x)[2]} columns. Let's extract the first
row of the table.  
<<geneA2geneB,echo=TRUE,results=hide>>=
x[1,]
@
Try to change the number, 1, to extract another row of the table. The row might
have column names such as Gene, M82, etc. Let's extract one element of the
table. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
x[1,2]
@
This is the element at the first row and the second column, which is
\Sexpr{x[1,2]}. Try to change the column number, 2, to something else to see the
content of the element referred to by the column number in the first row. You
can also extract a column of the table by leaving out the first number. 
<<geneA2geneB,echo=TRUE,results=hide>>=
x[,2]
@
Upto now, we introduced two types of data: a variable that contains a single
value such as \Robject{raw}, and a variable that contains a table such as
\Robject{x}. We now introduce a vector variable. Let's create a vector of
integers from 1 to 3 using \Rfunction{c}. Usually, it is good to avoid variable
names that are special to R, or do not use \Robject{c} for a variable name. 
<<geneA2geneB,echo=TRUE,results=hide>>=
c(1,2,3)
@
\program{R} provides two often-used functions: \Rfunction{rep} and
\Rfunction{seq} to create vectors. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
seq(3)
rep(1,3)
@
You can create a sequence of integers using the following line.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
1:3
-1:-3
@
Now, let's go back to the table, \Robject{x}. We learned how to extract an
element, a row, or a column. We can also select multiple rows or columns, or
both. Extract the first two rows using the following line.
<<geneA2geneB,echo=TRUE,results=hide>>=
x[c(1,2),]
@
Use the following line to extract the first two columns.
<<geneA2geneB,echo=TRUE,results=hide>>=
x[,c(1,2)]
@
Let's see the only the first several rows using \Rfunction{head}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(x[,c(1,2)])
@
We can extract the first two columns of the first two rows of the table.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
x[c(1,2),c(1,2)]
@
Until now, we learned how to extract rows or columns or both. We can remove rows
or columns or both. Use the following line to remove the first row.
<<geneA2geneB,echo=TRUE,results=hide>>=
x[-1,]
@
Try to call the following to remove the first column of the table.
<<geneA2geneB,echo=TRUE,results=hide>>=
x[,-1]
@
Of course, we can remove both the first column and the first row from the table.
<<geneA2geneB,echo=TRUE,results=hide>>=
x[-1,-1]
@
We discussed how to select or deselect rows or columns using numbers. We can
use a vector of TRUE or FALSE values, or boolean to extract parts of a table. 
As we noted above, the \Robject{x} is a \Sexpr{dim(x)[1]}-by-\Sexpr{dim(x)[2]}
table, which has \Sexpr{dim(x)[1]} rows, and \Sexpr{dim(x)[2]} columns. Let's
extract the first row of the table. To select the first row we need to create a
TRUE/FALSE vector of size being equal to the number of rows. TRUE or FALSE is a
special constant just like 0 or 1. We use \Rfunction{rep} to create a vector of
\Sexpr{dim(x)[1]}-many FALSE, and replace the first element of the vector with
TRUE. The first element of \Robject{y} is TRUE, while the rest of the elements
are FALSE.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
y <- rep(FALSE,dim(x)[1]) 
y[1] <- TRUE
@
Now, use the \Robject{y} to extract the first row of the table.
<<geneA2geneB,echo=TRUE,results=hide>>=
x[y,]
@
This is equivalent to the following line. The \Robject{y} is a boolean vector. 
<<geneA2geneB,echo=TRUE,results=hide>>=
x[1,]
@
We wish to use genes whose IL expression levels are greater than 1 in at least
one of the ILs. We also want to use genes whose M82 expression levels are
positive. We will first create a vector of TRUE/FALSE to find genes whose M82
expression levels are positive using the following line. 
<<geneA2geneB,echo=TRUE,results=hide>>=
x[,2] > 0
@
Now, we wish to find genes whose IL expression levels are greater than 1 in at
least one of the ILs. This requires two steps: first, we extract IL expression
values from the table, and compare each element with 1 to have a table of
TRUE/FALSE using the following line. The first three columns are not IL
expression levels, but gene name, M82, and LA716, which are removed from the
table.
<<geneA2geneB,echo=TRUE,results=hide>>=
z2 <- x[,-1:-3] > 1
@
Let's see the content of z2. First, let's see the dimension of \Robject{z2}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
dim(z2)
@
The \Robject{z2} is a \Sexpr{dim(z2)[1]}-by-\Sexpr{dim(z2)[2]}
table, which has \Sexpr{dim(z2)[1]} rows, and \Sexpr{dim(z2)[2]} columns.
Let's see the first several rows of the table of \Robject{z2} in the first two
columns.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(z2[,c(1,2)])
@
Let us compare the above TRUE/FALSE partial table with the following one.
Elements that are greater than 1 in the following table are labeled TRUE in the
table above.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(x[,c(4,6)])
@
Let's count the number of IL's whose expression levels are greater than 1. We
can achieve this by counting the number of TRUE for each row. We use
\Rfunction{sum} to count the number of TRUE in a TRUE/FALSE vector. For example,
we create a vector of 5 TRUE's and 3 FALSE's, and take the vector as an argument
of \Rfunction{sum}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
sum(c(T,T,T,F,F,T,F,T))
@
Note that T is a short name for TRUE, and F for FALSE. We wish to take each row
from \Robject{z2}, and apply \Rfunction{sum} to the row, creating an integer
vector of size being equal to the number of rows in \Robject{z2}. The following
line does this magically. 
<<geneA2geneB,echo=TRUE,results=hide>>=
apply(z2,1,sum)
@
The \Rfunction{apply} call returns an integer vector, each element of which is
equal to the number of IL's whose expression levels are greater than 1. By
comparing the integer vector with 0 we have a TRUE/FALSE vector that indicates
which genes have at least one IL whose expression level is greater than 1.
<<geneA2geneB,echo=TRUE,results=hide>>=
apply(z2,1,sum) > 0
@
Now, we create a new vector using two boolean vectors. The first vector contains
the same number of TRUE/FALSE as genes. It describes which genes contains at
least one IL whose expression level is greater than 1. The second vector
contains the same number of TRUE/FALSE as genes, which describes which genes
contain M82 whose expression levels are postive.
<<geneA2geneB,eval=FALSE,echo=TRUE>>=
apply(z2,1,sum) > 0
x[,2] > 0
@
We take the AND boolean operation to create \Robject{w}, which is still a
TRUE/FALSE vector of size being equal to the number of genes. It describes which
genes are what we want.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
w <- apply(z2,1,sum) > 0 & x[,2] > 0
@
Now, we take M82's expression for those genes we want, and take IL expression
levels for the same genes. We, then, divide IL expression by M82 expression. We
also applied two functions: \Rfunction{log2}, and \Rfunction{data.matrix}. The
first one is a log2 function, and the second convert the \Robject{z3} to a R
data type, which can be used with \Rfunction{apply} later.
<<geneA2geneB,echo=TRUE,results=hide>>=
m82 <- x[w,2]
z3 <- x[w,-1:-3]
z4 <- data.matrix(log2(z3/m82))
@
Let's check the values.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(m82)
head(z3[,1:3])
head(z4[,1:3])
@
We replace the infinite elements with NA for easier handling later by applying
the following custom function as the third argument of \Rfunction{apply} to each
element of the table \Robject{z4}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
z5 <- apply(z4,1:2,function(x) if (is.infinite(x)) NA else x)
@
We want to name the rows of \Robject{z5}, which has column names. We extract
gene names from the original table \Robject{x}, and set the row names of
\Robject{z5} to those names using \Rfunction{rownames}. Finally, we transpose
the table \Robject{z5}, so that the columns are genes, and rows are IL's.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
gname <- x[w,1]
rownames(z5) <- gname
z5 <- t(z5)
@
The \Rfunction{t} reverses the rows and columns of a table.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
a <- matrix(1:6,ncol=3)
a
t(a)
rm(a)
@
We have created variables, some of which are not needed. It is confusing to have
too many variables without particular meaning in variable names. We can list all
of the variables that we have created so far using \Rfunction{ls}. Note that
the parentheses are required for R function calls.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
ls()
@
Let's delete some variables.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
rm(x,w,z2,z3,z4,m82,gname)
@
Let's call \Rfunction{ls} to see what variables are left.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
ls()
@

We need to extract columns from \Robject{z5} for a pair set of genes. First,
create a file path to file ``for-apriori-subnetwork-a.csv'', which contains a
larger set of genes using the following line. The other file
``for-apriori-subnetwork-b.csv'' contains a smaller set of genes.  
<<geneA2geneB,echo=TRUE,results=verbatim>>=
paste("data",raw,geneSetA,sep="/")
@
Because the file contains just names of genes in a simple text file, we can call
\Rfunction{scan} to read those gene names using the following line.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
geneNameSetA <- scan(paste("data",raw,geneSetA,sep="/"),what="character")
geneNameSetB <- scan(paste("data",raw,geneSetB,sep="/"),what="character")
@
Because not all of the genes in ``for-apriori-subnetwork-a.csv'' might not exist
in the gene set of the expression data, we extract the genes that also exist in
the gene set of the expression data. Let's call the genes in the file
``for-apriori-subnetwork-a.csv'' the gene set A, and the other the gene set B.
We create a boolean vector of the same size as the gene set A using the
following line. The vector describes which genes in the gene set A exist in the
gene set of the expresion data. The gene names in the expression data can be
accessed by calling \Rfunction{colnames}. See above how the column names of the
\Robject{z5} are created. If you cannot see how it is created, please go back to
the beginning of this section to understand it. Note that we transposed the
table \Robject{z5}, and used \Rfunction{rownames} to label rows with gene names.
<<geneA2geneB,echo=TRUE,results=hide>>=
geneNameSetA %in% colnames(z5)
@
Using \Rfunction{sum} let's count the number of TRUE, or how many gene in the set A exist in the
expression gene set.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
sum(geneNameSetA %in% colnames(z5))
@
We can cout the number of elements in a vector using \Rfunction{length}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
length(geneNameSetA)
@
Two numbers might be the same. Let's assume that they are different.
As we explained how to extract parts of a vector or a table, we can use the
boolean vector to extract genes that exist in the expression gene set in the
following line. Note that we assign the new vector to the same
\Robject{geneNameSetA}. This effectively deletes genes that are absent in the
expression gene set. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
geneNameSetA <- geneNameSetA[geneNameSetA %in% colnames(z5)]
@
Try the same script line for the gene set B. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
sum(geneNameSetB %in% colnames(z5))
length(geneNameSetB)
geneNameSetB <- geneNameSetB[geneNameSetB %in% colnames(z5)]
@
Now, we introduct a function called \Rfunction{match}. We wish to
extract columns from the table \Robject{z5} for the gene set B in the same order
of the gene set B. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
w <- match(geneNameSetB,colnames(z5))
@
It could be easier to see what \Rfunction{match} does by seeing \Robject{w}. The
first element of the gene set B is as follows:
<<geneA2geneB,echo=TRUE,results=verbatim>>=
geneNameSetB[1]
@
This gene name is found at \Sexpr{w[1]}-th element in the expression gene set.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
w[1]
colnames(z5)[w[1]]
@
We discussed how we extract parts of columns from a table using numbers. For
example, we can extract the first two columns of table \Robject{z5} using the
following line. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(z5[,c(1,2,3)])
@
If we rearrange the order of the numbers in the vector, we rearrange the order
of columns. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(z5[,c(3,1,2)])
@
In much the same way, we use the the value of \Rfunction{match} to extract
columns of \Robject{z5} for the gene set B in the gene order of the gene set B
using the following line.
<<geneA2geneB,echo=TRUE,results=hide>>=
z5B <- z5[,w]
@
Let's check the content of \Robject{z5B}, and gene set B.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
head(z5B[,1:3])
head(geneNameSetB,n=3)
w[1:3]
@
Note that the first three genes are as follows:
<<geneA2geneB,echo=TRUE,results=verbatim>>=
colnames(z5)[w[1]]
colnames(z5)[w[2]]
colnames(z5)[w[3]]
colnames(z5)[w[1:3]]
@
We introduct two more functions: \Rfunction{ncol} and \Rfunction{stopifnot}. The
\Rfunction{ncol} returns the number of columns of an R table. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
ncol(z5)
@
The latter \Rfunction{stopifnot} checks whether the statement inside the
function is true.  if not, it make the R program crash. This function is usually
for sanity check.  If something is wrong or not as expected, we want the program
crash so that we could avoid bugs in the R script. The more often used
\Rfunction{stopifnot}, the better. The following line should produce an error.
<<geneA2geneB,eval=FALSE,echo=TRUE>>=
stopifnot(FALSE)
@
The following line should not produce any error.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
stopifnot(TRUE)
@
Please, check if you understand the following three lines. If not, review all of
the previous content and make sure that you see what the following lines do.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
stopifnot(ncol(z5) > length(geneNameSetB))
stopifnot(sum(geneNameSetB %in% colnames(z5)) == length(geneNameSetB))
stopifnot(sum(colnames(z5B) == geneNameSetB) == length(geneNameSetB))
@
Do the same thing for the gene set A.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
z5A <- z5[,match(geneNameSetA,colnames(z5))]
stopifnot(ncol(z5) > length(geneNameSetA))
stopifnot(sum(geneNameSetA %in% colnames(z5)) == length(geneNameSetA))
stopifnot(sum(colnames(z5A) == geneNameSetA) == length(geneNameSetA))
@
Now, we extract a column from the table \Robject{z5A}, and another column from
the table \Robject{z5B}, and compute the correlation coefficient and the p-value
for testing the null hypothesis of no correlation using Pearson correlation
method. To construct the correlation table, we need to understand four
functions: \Rfunction{for}, \Rfunction{cbind}, \Rfunction{na.omit}, \Rfunction{ifelse}, and
\Rfunction{cor.test}. A programming language provides a way of looping. The
\Rfunction{for} allows to loop the script inside the \Rfunction{for}. The
following loop extracts one element from the vector of 1, 2, and 3 at a time,
stores it in \Robject{i}, and calls \Rfunction{print}. The \Rfunction{print} is
called three times.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
for (i in c(1,2,3)) {
  print(i)
}
@
The \Rfunction{cbind} concatenates two vectors.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
i <- cbind(c(1, 2, 3, 4), c(1, 2, NA, 4))
i
@
The \Rfunction{na.omit} removes rows with NA.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
a <- na.omit(i)
a
@
Note that \Robject{a} returned by \Rfunction{na.omit} is still a table or
matirx. We can call \Rfunction{cor.test} to the correlation of the two vectors
above, but without the row with NA.
<<geneA2geneB,echo=TRUE,results=hide>>=
cor.test(a[,1],a[,2])
@
We need two values from \Rfunction{cor.test}: corrrelation coefficient and
p-value for the null hypothesis of no correlation.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
cor.test(a[,1],a[,2])$estimate
cor.test(a[,1],a[,2])$p.value
@
The \Rfunction{ifelse} takes three arguments to test the first argument and
returns the second if the first statement is true, otherwise returns the third.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
ifelse(1 < 2, TRUE, FALSE)
ifelse(1 > 2, TRUE, FALSE)
@
Now, we are in a position to use the following script to compute the correlation
coefficient between two genes.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
m.cor <- c()
for (j in seq(ncol(z5A))) {
  for (i in seq(ncol(z5B))) {
    a <- na.omit(cbind(z5B[,i],z5A[,j]))
    m.cor <- c(m.cor,ifelse(nrow(a) >= 5,cor.test(a[,1],a[,2])$estimate,NA))
  }
}
rm(i,j,a)
@
The \Robject{m.cor} is a vector not a table. We need to change the dimension
without changing the content. For example, we can create a 2-by-3 matrix from a
vector of size 6. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
a <- 1:6
dim(a) <- c(2,3)
a
@
Note that the elements in the vector are ordered in column-wise. This is
important to remember. Many operations are done in column-wise in R as far as I
know. Now, we give the dimension to \Robject{m.cor}. Because the outer loop runs
\Robject{z5A}, the number of columns of \Robject{m.cor} is equal to the number
of columns in \Robject{z5A}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
dim(m.cor) <- c(ncol(z5B),ncol(z5A))
@
We could call a similar script for p-values.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
m.pval <- c()
for (j in seq(ncol(z5A))) {
  for (i in seq(ncol(z5B))) {
    a <- na.omit(cbind(z5B[,i],z5A[,j]))
    m.pval <- c(m.pval,ifelse(nrow(a) >= 5,cor.test(a[,1],a[,2])$p.value,NA))
  }
}
rm(i,j,a)
dim(m.pval) <- c(ncol(z5B),ncol(z5A))
@
Handling the table-form data is one of the most important parts in R
programming. Another important part is the family of \Rfunction{apply}. Loops in
R are inefficient. We need to understand two functions: \Rfunction{expand.grid}
and \Rfunction{mapply}. An example would be useful in understanding the
function.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
datagrid <- expand.grid(i=1:2,j=1:3)
datagrid
@
We create a custom function \Rfunction{z5ABcor.test.cor}, which uses two indices
to comute the correlation coefficient. The \Rfunction{mapply} takes one row from 
\Robject{datagrid} to use the two values as the two arguments for
\Rfunction{z5ABcor.test.cor}. The \Rfunction{mapply} returns a vector of size
being equal to the number of rows of the \Robject{datagrid}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
z5ABcor.test.cor <- function(i,j) {
  a <- na.omit(cbind(z5B[,i],z5A[,j]))
  ifelse(nrow(a) >= 5,cor.test(a[,1],a[,2])$estimate,NA)
}
datagrid <- expand.grid(i=seq(ncol(z5B)),j=seq(ncol(z5A)))
m.cor2 <- mapply(z5ABcor.test.cor, datagrid$i, datagrid$j)
dim(m.cor2) <- c(ncol(z5B),ncol(z5A))

z5ABcor.test.pval <- function(i,j) {
  a <- na.omit(cbind(z5B[,i],z5A[,j]))
  ifelse(nrow(a) >= 5,cor.test(a[,1],a[,2])$p.value,NA)
}
m.pval2 <- mapply(z5ABcor.test.pval, datagrid$i, datagrid$j)
dim(m.pval2) <- c(ncol(z5B),ncol(z5A))
@
We can check if the two method give the same result.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
identical(m.cor,m.cor2)
identical(m.pval,m.pval2)
@
We name the columns and rows, and transpose the table.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
colnames(m.pval) <- colnames(z5A)
rownames(m.pval) <- colnames(z5B)
m.pval <- t(m.pval)
colnames(m.cor) <- colnames(z5A)
rownames(m.cor) <- colnames(z5B)
m.cor <- t(m.cor)
rm(x,y,a,b,i,j)
@
We now find the annotation of the genes. We first load all of the annotation
from the gff data file. Although I will explain this somewhere else, you
consider \Robject{gene.range} as a table, from which we extract rows of mRNA.
The mRNA rows contain annotations. 
<<geneA2geneB,echo=TRUE,results=verbatim>>=
GFFFILE <- paste("data",raw,"gff.RData",sep="/")
load(GFFFILE)
gene.range.mrna <- gene.range[gene.range$type=="mRNA",]
@
In the first \Rfunction{stopifnot}, we make sure that all of the genes in our
correlation table exist in the annotation. In the second, we make sure that all
of the genes in the annotation file contains annotations. We extract annotations
of the genes in the correlation table using \Rfunction{match}.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
stopifnot(sum(gene.range.mrna$ID %in% paste("mRNA:",rownames(m.pval),sep="")) == nrow(m.pval))
stopifnot(length(unlist(gene.range.mrna$Note))==nrow(gene.range.mrna))
x.note <- unlist(gene.range.mrna$Note)[match(paste("mRNA:",rownames(m.pval),sep=""),gene.range.mrna$ID)]
@
We apply \Rfunction{sum} to each row, which is a boolean vector to count 
genes in the gene set B for each gene in the gene set A.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
b1 <- apply(m.pval < 0.1,1,sum,na.rm=T)
b2 <- apply(m.pval < 0.01,1,sum,na.rm=T)
b3 <- apply(m.pval < 0.001,1,sum,na.rm=T)
b4 <- apply(m.pval < 0.0001,1,sum,na.rm=T)
@
Finally, we create a table using the correlation table, the four vectors above,
and the annotation, and write it in a file.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
f <- data.frame(m.pval,n1=b1,n2=b2,n3=b3,n4=b4,note=x.note)
write.csv(f,file=paste("output/cor-ab/",ab.file,"-pval.csv",sep=""))
f <- data.frame(m.cor,n1=b1,n2=b2,n3=b3,n4=b4,note=x.note)
write.csv(f,file=paste("output/cor-ab/",ab.file,"-cor.csv",sep=""))
@
Let's check if the gene annotation in the final output is correct. We can use
a \Rfunction{for} loop or \Rfunction{mapply}. Note that the following line could
be slow because the final table referred to by \Robject{f} contains
\Sexpr{nrow(f)} rows.
<<geneA2geneB,echo=TRUE,results=verbatim>>=
x.note <- unlist(gene.range.mrna$Note)
for (i in seq(nrow(f))) {
  stopifnot(x.note[gene.range.mrna$Name == rownames(f)[i]] == f$note[i])
}
x <- c()
for (i in seq(nrow(f))) {
  x <- c(x,x.note[gene.range.mrna$Name == rownames(f)[i]] == f$note[i])
}
y <- 
  mapply(function(i) x.note[gene.range.mrna$Name == rownames(f)[i]] == f$note[i],
         seq(nrow(f)))
stopifnot(sum(x)==nrow(f))
identical(x,y)
rm(x,y,i,x.note)
@

\section{Help}

<<geneA2geneB,eval=FALSE,echo=TRUE,results=hide>>=
help(":")
help("[")
@

\section{Acknowledgments}

Most of the works are done using \citep{R2011}.

\renewcommand*{\refname}{REFERENCES}
\bibliographystyle{jbactas}
\bibliography{burne}
\clearpage{}

\end{document}
